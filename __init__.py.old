from modloader import modast, modinfo
from modloader.modclass import Mod, loadable_mod
import jz_magmalink as ml

@loadable_mod
class AWSWMod(Mod):
    name = "Premonition"
    version = "0.1"
    author = "squarebells"
    dependencies = ["MagmaLink", "A Solitary Mind", "Chaos_Knight core mod."]
    nsfw = True

    def mod_load(self):
    
        ml.find_label("seccont") \
            .search_say("I awoke from uneasy dreams") \
            .hook_to("sqb_naomi_premofalse") \
            .search_say("After a good stretch") \
            .link_from("sqb_naomi_premofalse_end")
        #There's probably a better way of doing this? Can you declare variables in the init?
    
        ml.find_label("eck_naomi_introduction") \
            .search_say("As I was passing through") \
            .hook_to("sqb_naomi_endingcheck", condition='persistent.ecknaomiendingseena == "A"') \
            .search_say("Before I knew it") \
            .link_from("sqb_naomi_endingcheck_end")
            
        ml.find_label("eck_naomi_introduction") \
            .search_say("Let me help.") \
            .hook_to("sqb_naomi_premostart", condition='sqbpremounlocked == True') \
            .search_say("I read the reports") \
            .link_from("sqb_naomi_premostart_end")
            
        ml.find_label("eck_naomi_m1") \
            .search_say("You're also working on the latest case, I assume") \
            .search_say("For me it's more of a personal thing") \
            .search_say("To make things worse, when I submitted those documents") \
            .search_say("What would you like") \
            .search_say("What about drinks?") \
            .hook_to("sqb_naomi_cafe_discussion", condition='sqbpremounlocked == True') \
            .search_say("I'm the analyst.") \
            .link_from("sqb_naomi_cafe_discussion_end")
            
        ml.find_label("eck_naomi_m1") \
            .search_say("You're also working on the latest case, I assume") \
            .search_say("For me it's more of a personal thing") \
            .search_say("To make things worse, when I submitted those documents") \
            .search_say("What would you like") \
            .search_say("What about drinks?") \
            .search_say("Soon, her plate") \
            .hook_to("sqb_naomi_cafe_eating", condition='sqbpremounlocked == True') \
            .search_say("It happens sometimes") \
            .link_from("sqb_naomi_cafe_eating_end")
            
        ml.find_label("eck_naomi_m1") \
            .search_say("You're also working on the latest case, I assume") \
            .search_say("For me it's more of a personal thing") \
            .search_say("To make things worse, when I submitted those documents") \
            .search_say("What would you like") \
            .search_say("What about drinks?") \
            .search_say("...") \
            .hook_to("sqb_naomi_cafe_money", condition='sqbpremounlocked == True') \
            .search_say("Of course, we haven't") \
            .link_from("sqb_naomi_cafe_money_end")
            
        ml.find_label("eck_naomi_m1") \
            .search_say("You're also working on the latest case, I assume") \
            .search_say("For me it's more of a personal thing") \
            .search_say("To make things worse, when I submitted those documents") \
            .search_say("What would you like") \
            .search_say("What about drinks?") \
            .search_say("...") \
            .search_say("Do you have any specific places") \
            .search_say("Don't you have friends") \
            .hook_to("sqb_naomi_special_question", condition='sqbpremounlocked == True') \
            .search_say("I know what you mean") \
            .link_from("sqb_naomi_special_question_end")
            
        #Uncomment if you want a preview
        ml.find_label("eck_naomi_introduction") \
            .search_say("Then you're in good hands.") \
            .hook_to("sqb_naomi_m6_discussion_reality", condition='sqbpremounlocked == True') \
            .search_say("You can't be too") \
            .link_from("sqb_naomi_m6_discussion_reality_end")
            
    def mod_complete(self):
        pass
